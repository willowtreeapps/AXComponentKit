{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Screen models and navigator extensions are wonderful tools, but the view hierarchy of your application needs to be associated with the components in their relevant screen models for all of the pieces to work together. Fortunately, AXComponentKit makes this just as easy as assigning accessibility identifiers."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"AXComponentKit was built with SwiftUI in mind, but all of the view modifiers presented in this guide are philosophically compatible with UIKit. More work is required to see the UIKit variants of these view modifiers come to life."}]}],"type":"aside","name":"Note"},{"anchor":"Screen-Identifiers","level":2,"type":"heading","text":"Screen Identifiers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Screens are an interesting case, so let’s get those out of the way up front. In SwiftUI, the lines between “views” and “screens” are a bit more blurry than in UIKit. In SwiftUI, we suggest using your best judgement to figure out what part of your hierarchy embodies a “screen.” We recommend thinking about this as simply “tag the outermost view\/container of your screen.”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a gently-modified example from the sample app illustrating how to assign a screen identifier:"}]},{"type":"codeListing","syntax":"swift","code":["struct FirstTabView: View {","    var body: some View {","        NavigationStack {","            VStack {","                Button(\"Push Detail\") {","                    \/\/ TODO: Something exciting","                }","                .automationComponent(\\FirstTabScreen.detailButton)","            }","            .automationScreen(FirstTabScreen.self)","        }","    }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The screen is assigned "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the NavigationStack, since each view on the stack constitutes a screen full of content."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of this works nicely in SwiftUI: AXComponentKit adds a transparent background to your view and assigns the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/AXComponentKit\/documentation\/AXComponentKit\/AXScreen\/screenIdentifier"},{"type":"text","text":" as its accessibility identifier. That transparent background is treated as an accessibility container to prevent compatibility issues with VoiceOver."}]},{"anchor":"Component-Identities","level":2,"type":"heading","text":"Component Identities"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The approach for assigning components to views is consistent no matter what type of component you need to assign. Examples of each type are listed below."}]},{"anchor":"Static-Components","level":4,"type":"heading","text":"Static Components"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this modified example from the sample project, this button is being assigned as the detailButton of the FirstTabScreen."}]},{"type":"codeListing","syntax":"swift","code":["struct FirstTabView: View {","    var body: some View {","        VStack {","            Button(\"Push Detail\") {","                \/\/ TODO: Something exciting","            }","            .automationComponent(\\FirstTabScreen.detailButton)","        }","    }","}"]},{"anchor":"Dynamic-Components","level":4,"type":"heading","text":"Dynamic Components"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this modified example from the sample project, each row is uniquely identified by an integer and assigned as a row item for the SecondTabScreen. The mechanism is the same as for static components, but an additional dynamic value is required."}]},{"type":"codeListing","syntax":"swift","code":["struct SecondTabView: View {","","    let items = 1 ... 1000","","    var body: some View {","        List(items, id: \\.self) { item in","            Text(\"Item \\(item)\")","                .automationComponent(\\SecondTabScreen.rowItem, value: item)","        }","    }","}"]},{"anchor":"Scrollview-Components","level":4,"type":"heading","text":"Scrollview Components"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding an additional line to the example from above, we can declare the scroll view that houses all row elements."}]},{"type":"codeListing","syntax":"swift","code":["struct SecondTabView: View {","","    let items = 1 ... 1000","","    var body: some View {","        List(items, id: \\.self) { item in","            Text(\"Item \\(item)\")","                .automationComponent(\\SecondTabScreen.rowItem, value: item)","        }","        .automationScrollView(\\SecondTabScreen.table)","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/axcomponentkit\/integratingwithviews"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/AXComponentKit\/documentation\/AXComponentKit\/IntegratingWithViews","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"How to integrate AXComponentKit with SwiftUI "},{"type":"strikethrough","inlineContent":[{"type":"text","text":"and UIKit"}]}],"kind":"article","metadata":{"roleHeading":"Article","title":"Integrating With Views","role":"article","modules":[{"name":"AXComponentKit"}]},"hierarchy":{"paths":[["doc:\/\/AXComponentKit\/documentation\/AXComponentKit"]]},"references":{"doc://AXComponentKit/documentation/AXComponentKit":{"role":"collection","title":"AXComponentKit","abstract":[{"type":"text","text":"Modular UI testing framework abstraction that works in concert with XCTest"}],"identifier":"doc:\/\/AXComponentKit\/documentation\/AXComponentKit","kind":"symbol","type":"topic","url":"\/documentation\/axcomponentkit"},"doc://AXComponentKit/documentation/AXComponentKit/AXScreen/screenIdentifier":{"role":"symbol","title":"screenIdentifier","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"screenIdentifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Unique identifier attached to the screen to ensure that it is visible while navigating."}],"identifier":"doc:\/\/AXComponentKit\/documentation\/AXComponentKit\/AXScreen\/screenIdentifier","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/axcomponentkit\/axscreen\/screenidentifier"}}}